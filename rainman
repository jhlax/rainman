#!/usr/bin/env python3

from rain import *

#
#   Main function when ran
#


"""
Click command-line interface for use
"""

import click


@click.group()
@click.option("--db", "-D", type=int, default=0)
@click.option("--log", "-L", is_flag=True, default=True)
@click.pass_context
def rainman(ctx, db, log):
    r = get_redis_session(db=db)

    if not log:
        logger.disable("__main__")
        logger.disable("rainman")

    ctx.ensure_object(dict)

    ctx.obj["SESSION"] = r
    ctx.obj["DB"] = db


@rainman.command()
@click.argument("cards", nargs=-1, type=str)
@click.pass_context
def rm(ctx, cards):
    for card in cards:
        remove_card(ctx.obj["SESSION"], rank=card)


@rainman.command()
@click.argument("cards", nargs=-1, type=str)
@click.pass_context
def put(ctx, cards):
    for card in cards:
        replace_card(ctx.obj["SESSION"], rank=card)


@rainman.command()
@click.argument("decks", type=int, default=6)
@click.pass_context
def init(ctx, decks):
    init_session(ctx.obj["SESSION"], decks)


@rainman.command()
@click.pass_context
def counts(ctx):
    card_counts(ctx.obj["SESSION"])


@rainman.command()
@click.pass_context
def run(ctx):
    running_count(ctx.obj["SESSION"])


@rainman.command()
@click.pass_context
def real(ctx):
    real_count(ctx.obj["SESSION"])


@rainman.command()
@click.argument("funds", type=float)
@click.pass_context
def dep(ctx, funds):
    add_funds(ctx.obj["SESSION"], funds)


@rainman.command()
@click.argument("funds", type=float)
@click.pass_context
def wdraw(ctx, funds):
    withdraw_funds(ctx.obj["SESSION"], funds)


@rainman.command()
@click.pass_context
def funds(ctx):
    get_funds(ctx.obj["SESSION"])


@rainman.command()
@click.pass_context
def cards(ctx):
    shoe_length(ctx.obj["SESSION"])


@rainman.command()
@click.option("--exact", "-e", is_flag=True, default=True)
@click.pass_context
def decks(ctx, exact):
    decks_left(ctx.obj["SESSION"], exact)


@rainman.command()
@click.pass_context
def status(ctx):
    session_status(ctx.obj["SESSION"])


@rainman.command()
@click.argument("times", type=int, default=1)
@click.pass_context
def shuffle(ctx, times):
    import random

    cards = list(
        map(
            lambda c: Card(str(c), "None", card_value(c)),
            ctx.obj["SESSION"].lrange("sim:shoe", 0, -1)
        )
    )

    shuffled = cards
    for i in range(times):
        shuffled = random.shuffle(cards)

    ctx.obj["SESSION"].delete("sim:shoe")

    for card in cards:
        ctx.obj["SESSION"].lpush("sim:shoe", card.rank)

    logger.success(f"shuffled {len(cards)} cards.")


@rainman.command()
@click.argument("times", type=int, default=1)
@click.pass_context
def draw(ctx, times):
    for d in range(times):
        card = ctx.obj["SESSION"].rpop("sim:shoe")
        remove_card(ctx.obj["SESSION"], rank=card)


@rainman.command()
@click.argument("amount", nargs=-1, type=float)
@click.pass_context
def buyin(ctx, amount):
    if amount:
        set_buyin(ctx.obj["SESSION"], amount[0])
    else:
        get_buyin(ctx.obj["SESSION"])


@rainman.command()
@click.pass_context
def live(ctx):
    i = ""
    c = None

    if c is not None:
        print("card:", c)

    logger.disable("__main__")
    logger.disable("rainman")

    while i != "Z":
        if i == "RR":
            init_session(ctx.obj["SESSION"], decks=6)
            i = ""
            continue

        if i == "D":
            c = ctx.obj["SESSION"].rpop("sim:shoe")
            remove_card(ctx.obj["SESSION"], rank=c)

        i = input("Card/Command [Z to Exit]: ").upper().strip()
        os.system("clear")

        if i:
            j = i.split()

            for k in j:
                if k[0] == "-" and len(k) != 1:
                    replace_card(ctx.obj["SESSION"], rank=k[1:])

                else:
                    if k in C_ALL:
                        c = remove_card(ctx.obj["SESSION"], rank=k)
                        ctx.obj["SESSION"].lpush("history", c)
                    else:
                        print(f"{k} not a command")

        decks = decks_left(ctx.obj["SESSION"], False)
        cards = shoe_length(ctx.obj["SESSION"])
        realc = real_count(ctx.obj["SESSION"])
        run = running_count(ctx.obj["SESSION"])

        logger.enable("__main__")
        logger.enable("rainman")

        logger.info(f"DECKS: {decks:.2f}")
        logger.info(f"CARDS: {cards}")
        logger.success(f" REAL: {realc:.3f} ({100 * realc / cards:.2f}% adv)")
        logger.info(f"  RUN: {run}")

        logger.disable("__main__")
        logger.disable("rainman")

        card_counts(ctx.obj["SESSION"])


@rainman.command()
@click.pass_context
def stream(ctx):
    logger.disable("__main__")
    logger.disable("rainman")

    while True:
        os.system("clear")

        decks = decks_left(ctx.obj["SESSION"], False)
        cards = shoe_length(ctx.obj["SESSION"])
        realc = real_count(ctx.obj["SESSION"])
        run = running_count(ctx.obj["SESSION"])

        logger.enable("__main__")
        logger.enable("rainman")

        logger.info(f"DECKS: {decks:.2f}")
        logger.info(f"CARDS: {cards}")
        try:
            logger.success(f" REAL: {realc:.3f} ({100 * realc / cards:.2f}% adv)")
        except ZeroDivisionError:
            logger.error(f" REAL: 0")
        logger.info(f"  RUN: {run}")

        logger.disable("__main__")
        logger.disable("rainman")

        card_counts(ctx.obj["SESSION"])

        time.sleep(1.37137)

    c = None


if __name__ == "__main__":
    try:
        rainman()
    finally:
        # clear_session(session)
        pass
